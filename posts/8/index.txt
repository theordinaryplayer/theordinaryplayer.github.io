1:"$Sreact.fragment"
2:I[1917,["874","static/chunks/874-0715c6660f33056f.js","177","static/chunks/app/layout-6821989e314e6304.js"],"default"]
3:I[7555,[],""]
4:I[1295,[],""]
5:I[6874,["874","static/chunks/874-0715c6660f33056f.js","880","static/chunks/app/posts/%5Bid%5D/page-ba617bb0ce8d0e66.js"],""]
6:I[9742,["874","static/chunks/874-0715c6660f33056f.js","177","static/chunks/app/layout-6821989e314e6304.js"],"Analytics"]
8:I[9665,[],"OutletBoundary"]
b:I[9665,[],"ViewportBoundary"]
d:I[9665,[],"MetadataBoundary"]
f:I[6614,[],""]
:HL["/_next/static/css/57ead594feaf2ad3.css","style"]
0:{"P":null,"b":"S_xh7GWUEdW5zAh9PZyMt","p":"","c":["","posts","8",""],"i":false,"f":[[["",{"children":["posts",{"children":[["id","8","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/57ead594feaf2ad3.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"antialiased bg-background text-foreground font-sans","children":[["$","$L2",null,{}],["$","main",null,{"className":"min-h-screen","children":["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","div",null,{"className":"flex flex-col items-center justify-center min-h-[80vh] px-4 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold mb-4 gradient-text","children":"404"}],["$","p",null,{"className":"text-xl text-muted-foreground mb-8","children":"Page not found"}],["$","p",null,{"className":"text-muted-foreground mb-8","children":"The page you are looking for might have been removed, had its name changed, or is temporarily unavailable."}],["$","$L5",null,{"href":"/","className":"px-6 py-3 bg-primary text-black rounded-full hover:bg-primary/90 transition-colors font-semibold","children":"Go back home"}]]}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}],["$","footer",null,{"className":"bg-black border-t border-primary/20 mt-20","children":["$","div",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12","children":[["$","div",null,{"className":"grid grid-cols-1 md:grid-cols-4 gap-8 mb-8","children":[["$","div",null,{"children":[["$","h3",null,{"className":"text-xl font-bold gradient-text mb-4","children":"The Ordinary Player"}],["$","p",null,{"className":"text-muted-foreground","children":"Rookie hackers on a mission to learn, fail, and hack smarter."}]]}],["$","div",null,{"children":[["$","h4",null,{"className":"font-semibold text-foreground mb-4","children":"Navigation"}],["$","ul",null,{"className":"space-y-2","children":[["$","li",null,{"children":["$","$L5",null,{"href":"/","className":"text-muted-foreground hover:text-primary transition-colors","children":"Home"}]}],["$","li",null,{"children":["$","$L5",null,{"href":"/members","className":"text-muted-foreground hover:text-primary transition-colors","children":"Members"}]}]]}]]}],["$","div",null,{"children":[["$","h4",null,{"className":"font-semibold text-foreground mb-4","children":"Resources"}],["$","ul",null,{"className":"space-y-2","children":[["$","li",null,{"children":["$","$L5",null,{"href":"/posts","className":"text-muted-foreground hover:text-primary transition-colors","children":"Posts"}]}],["$","li",null,{"children":["$","$L5",null,{"href":"/writeups","className":"text-muted-foreground hover:text-primary transition-colors","children":"Writeups"}]}]]}]]}],["$","div",null,{"children":[["$","h4",null,{"className":"font-semibold text-foreground mb-4","children":"Connect"}],["$","ul",null,{"className":"space-y-2","children":[["$","li",null,{"children":["$","a",null,{"href":"#","className":"text-muted-foreground hover:text-primary transition-colors","children":"Twitter"}]}],["$","li",null,{"children":["$","a",null,{"href":"#","className":"text-muted-foreground hover:text-primary transition-colors","children":"Discord"}]}],["$","li",null,{"children":["$","a",null,{"href":"#","className":"text-muted-foreground hover:text-primary transition-colors","children":"GitHub"}]}]]}]]}]]}],["$","div",null,{"className":"border-t border-primary/20 pt-8 text-center text-muted-foreground","children":["$","p",null,{"children":"© 2025 The Ordinary Player CTF Team. All rights reserved."}]}]]}]}],["$","$L6",null,{}]]}]}]]}],{"children":["posts",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["id","8","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L7","$undefined",null,["$","$L8",null,{"children":["$L9","$La",null]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","eLwYrix4xgyaJVjLMeJ-M",{"children":[["$","$Lb",null,{"children":"$Lc"}],null]}],["$","$Ld",null,{"children":"$Le"}]]}],false]],"m":"$undefined","G":["$f","$undefined"],"s":false,"S":true}
c:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
9:null
10:T5ace,<p class="markdown-p my-4 leading-relaxed">Short, practical, and focused on what you actually do in CTF forensic challenges: acquire, preserve, analyze, and report — with commands and tips you can run in your lab. All examples assume <strong class="markdown-strong font-bold">legal, in-scope</strong> work (CTF images, practice VMs).</p>
<p class="markdown-p my-4 leading-relaxed"><img src="https://www.eiresystems.com/wp-content/uploads/IT-specialist-examines-computer-showcasing-what-is-digital-forensics-in-cybersecurity.jpg" alt="1" class=""></p>
<h2 class="markdown-h2 text-2xl font-bold mt-6 mb-4">Quick workflow (the 5-minute plan)</h2>
<ol class="markdown-ol my-4 ml-6 list-decimal">
<li class="markdown-li my-2"><strong class="markdown-strong font-bold">Preserve</strong> — don’t change the original. Work from bit-for-bit copies.</li>
<li class="markdown-li my-2"><strong class="markdown-strong font-bold">Acquire</strong> — image the target (disk / memory / network capture).</li>
<li class="markdown-li my-2"><strong class="markdown-strong font-bold">Verify</strong> — hash originals and images (SHA256/SHA1).</li>
<li class="markdown-li my-2"><strong class="markdown-strong font-bold">Analyze</strong> — triage artifacts (files, logs, registry, PCs), then deep-dive (memory, carved files, timelines).</li>
<li class="markdown-li my-2"><strong class="markdown-strong font-bold">Report</strong> — timeline, artifacts, hashes, reproducible steps, and remediation or flags (CTF).</li>
</ol>
<hr class="markdown-hr my-6 h-px border-0 bg-border">
<h2 class="markdown-h2 text-2xl font-bold mt-6 mb-4">Tools you’ll use a lot (CTF-friendly)</h2>
<ul class="markdown-ul my-4 ml-6 list-disc">
<li class="markdown-li my-2">Disk imaging &amp; handling: <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">dd</code>, <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">dcfldd</code>, <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">ewfacquire</code> (libewf), <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">ftkimager</code></li>
<li class="markdown-li my-2">Filesystem &amp; carving: <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">fls</code>, <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">icat</code>, <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">tsk_recover</code> (SleuthKit), <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">bulk_extractor</code>, <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">scalpel</code>, <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">foremost</code>, <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">binwalk</code></li>
<li class="markdown-li my-2">Memory forensics: <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">volatility3</code>, <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">volatility</code> (legacy), <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">rekall</code></li>
<li class="markdown-li my-2">PCAP &amp; network: <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">tcpdump</code>, <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">tshark</code>, <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">wireshark</code>, <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">zeek</code></li>
<li class="markdown-li my-2">Hashing &amp; verification: <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">sha256sum</code>, <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">md5sum</code></li>
<li class="markdown-li my-2">Windows artifacts: <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">Registry Explorer</code>, <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">plaso/log2timeline</code> (psteal), <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">evtx</code>, <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">mftparser</code></li>
<li class="markdown-li my-2">Metadata &amp; quick triage: <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">strings</code>, <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">exiftool</code>, <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">file</code>, <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">rmlint</code></li>
<li class="markdown-li my-2">Automation / visual: <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">autopsy</code> (SleuthKit GUI), <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">timesketch</code> (timeline), <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">Bulk Extractor</code></li>
<li class="markdown-li my-2">Scripting: Python + <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">pytsk</code>, <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">pyewf</code>, <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">pyshark</code>, <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">pycryptodome</code> for custom tasks</li>
</ul>
<hr class="markdown-hr my-6 h-px border-0 bg-border">
<h2 class="markdown-h2 text-2xl font-bold mt-6 mb-4">Acquisition (examples)</h2>
<p class="markdown-p my-4 leading-relaxed"><strong class="markdown-strong font-bold">Disk image with dd (lab only)</strong></p>
<pre class="markdown-pre rounded-md bg-muted p-4 overflow-x-auto"><code class="hljs language-bash markdown-code font-mono text-sm"><span class="hljs-comment"># Make a bit-for-bit image and calculate SHA256 on the fly</span>
<span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/sdb bs=4M status=progress | <span class="hljs-built_in">tee</span> &gt;(<span class="hljs-built_in">sha256sum</span> &gt; original.sha256) &gt; image.raw
</code></pre>
<p class="markdown-p my-4 leading-relaxed"><strong class="markdown-strong font-bold">Use dcfldd for forensic-oriented imaging</strong></p>
<pre class="markdown-pre rounded-md bg-muted p-4 overflow-x-auto"><code class="hljs language-bash markdown-code font-mono text-sm">dcfldd <span class="hljs-keyword">if</span>=/dev/sdb of=/mnt/evidence/image.dd <span class="hljs-built_in">hash</span>=sha256 <span class="hljs-built_in">log</span>=image.log
</code></pre>
<p class="markdown-p my-4 leading-relaxed"><strong class="markdown-strong font-bold">Acquire an EWF (Expert Witness) image</strong></p>
<pre class="markdown-pre rounded-md bg-muted p-4 overflow-x-auto"><code class="hljs language-bash markdown-code font-mono text-sm">ewfacquire --evidence-name <span class="hljs-string">"ctf_disk"</span> --description <span class="hljs-string">"CTF challenge"</span> /dev/sdb /evidence/ctf.E01
</code></pre>
<p class="markdown-p my-4 leading-relaxed"><strong class="markdown-strong font-bold">Memory capture (Linux)</strong></p>
<pre class="markdown-pre rounded-md bg-muted p-4 overflow-x-auto"><code class="hljs language-bash markdown-code font-mono text-sm"><span class="hljs-comment"># LiME kernel module for lab VM</span>
insmod lime.ko <span class="hljs-string">"path=/evidence/mem.lime format=lime"</span>
</code></pre>
<p class="markdown-p my-4 leading-relaxed"><strong class="markdown-strong font-bold">Memory capture (Windows, lab)</strong></p>
<ul class="markdown-ul my-4 ml-6 list-disc">
<li class="markdown-li my-2">Use <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">winpmem</code> or <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">FTK Imager</code> to dump RAM to <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">mem.dmp</code>.</li>
</ul>
<hr class="markdown-hr my-6 h-px border-0 bg-border">
<h2 class="markdown-h2 text-2xl font-bold mt-6 mb-4">Verification</h2>
<pre class="markdown-pre rounded-md bg-muted p-4 overflow-x-auto"><code class="hljs language-bash markdown-code font-mono text-sm"><span class="hljs-built_in">sha256sum</span> image.raw &gt; image.raw.sha256
<span class="hljs-built_in">sha1sum</span> image.raw &gt; image.raw.sha1
<span class="hljs-comment"># Compare later to prove integrity</span>
<span class="hljs-built_in">sha256sum</span> -c image.raw.sha256
</code></pre>
<hr class="markdown-hr my-6 h-px border-0 bg-border">
<h2 class="markdown-h2 text-2xl font-bold mt-6 mb-4">Quick triage (speed matters in CTFs)</h2>
<p class="markdown-p my-4 leading-relaxed"><strong class="markdown-strong font-bold">Find interesting files (type/strings/search)</strong></p>
<pre class="markdown-pre rounded-md bg-muted p-4 overflow-x-auto"><code class="hljs language-bash markdown-code font-mono text-sm"><span class="hljs-comment"># list everything and top large files</span>
find /mnt/image_mount -<span class="hljs-built_in">type</span> f -<span class="hljs-built_in">printf</span> <span class="hljs-string">'%s %p\n'</span> | <span class="hljs-built_in">sort</span> -nr | <span class="hljs-built_in">head</span>

<span class="hljs-comment"># find documents, config, keys</span>
grep -R --line-number -iE <span class="hljs-string">"password|passwd|secret|api_key|private"</span> /mnt/image_mount || <span class="hljs-literal">true</span>

<span class="hljs-comment"># quick strings for binaries and suspicious files</span>
strings -n 8 /mnt/image_mount/path/to/file | egrep -i <span class="hljs-string">"flag|password|secret|http|ssh|token"</span>
</code></pre>
<p class="markdown-p my-4 leading-relaxed"><strong class="markdown-strong font-bold">Carve files from a raw image</strong></p>
<pre class="markdown-pre rounded-md bg-muted p-4 overflow-x-auto"><code class="hljs language-bash markdown-code font-mono text-sm"><span class="hljs-comment"># recover common filetypes</span>
foremost -i image.raw -o foremost_out
<span class="hljs-comment"># or</span>
scalpel image.raw -o scalpel_out
</code></pre>
<p class="markdown-p my-4 leading-relaxed"><strong class="markdown-strong font-bold">Bulk metadata extraction</strong></p>
<pre class="markdown-pre rounded-md bg-muted p-4 overflow-x-auto"><code class="hljs language-bash markdown-code font-mono text-sm">bulk_extractor -o bulk_out image.raw
<span class="hljs-comment"># outputs: cookies, url, email, phone, creditcards (if present), and carved files</span>
</code></pre>
<hr class="markdown-hr my-6 h-px border-0 bg-border">
<h2 class="markdown-h2 text-2xl font-bold mt-6 mb-4">Filesystem &amp; Windows artifact quick hits</h2>
<p class="markdown-p my-4 leading-relaxed"><strong class="markdown-strong font-bold">SleuthKit example: list filesystem metadata</strong></p>
<pre class="markdown-pre rounded-md bg-muted p-4 overflow-x-auto"><code class="hljs language-bash markdown-code font-mono text-sm"><span class="hljs-comment"># list file entries (inode-based)</span>
fls -r -m / image.raw &gt; fls.txt

<span class="hljs-comment"># extract a file by inode</span>
icat image.raw 12345 &gt; recovered_file.bin
</code></pre>
<p class="markdown-p my-4 leading-relaxed"><strong class="markdown-strong font-bold">NTFS Master File Table (MFT) / $MFT</strong></p>
<ul class="markdown-ul my-4 ml-6 list-disc">
<li class="markdown-li my-2">Use <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">mftparser</code> or <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">fls</code> to enumerate deleted/renamed files and timestamps.</li>
</ul>
<p class="markdown-p my-4 leading-relaxed"><strong class="markdown-strong font-bold">Windows Registry (offline)</strong></p>
<ul class="markdown-ul my-4 ml-6 list-disc">
<li class="markdown-li my-2">Mount or extract <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">SYSTEM</code>, <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">SOFTWARE</code>, <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">NTUSER.DAT</code>, <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">SAM</code> then use <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">reglookup</code> or <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">Registry Explorer</code> to parse:</li>
</ul>
<pre class="markdown-pre rounded-md bg-muted p-4 overflow-x-auto"><code class="hljs language-bash markdown-code font-mono text-sm"><span class="hljs-comment"># example: list user profiles from SOFTWARE/NTUSER keys (lab)</span>
python reglookup.py -f NTUSER.DAT -k <span class="hljs-string">"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders"</span>
</code></pre>
<p class="markdown-p my-4 leading-relaxed"><strong class="markdown-strong font-bold">Event Logs (EVTX)</strong></p>
<ul class="markdown-ul my-4 ml-6 list-disc">
<li class="markdown-li my-2">Use <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">evtx_export</code> or <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">evtx_dump</code> to convert to JSON/CSV for timeline.</li>
</ul>
<p class="markdown-p my-4 leading-relaxed"><strong class="markdown-strong font-bold">Prefetch &amp; LNK</strong></p>
<ul class="markdown-ul my-4 ml-6 list-disc">
<li class="markdown-li my-2">Inspect <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">C:\Windows\Prefetch</code> and <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">.lnk</code> files for executed programs and timestamps (helpful in CTF challenges to find executed exploiters).</li>
</ul>
<hr class="markdown-hr my-6 h-px border-0 bg-border">
<h2 class="markdown-h2 text-2xl font-bold mt-6 mb-4">Memory forensics (fast path)</h2>
<p class="markdown-p my-4 leading-relaxed"><strong class="markdown-strong font-bold">Identify profile &amp; dump info with volatility3</strong></p>
<pre class="markdown-pre rounded-md bg-muted p-4 overflow-x-auto"><code class="hljs language-bash markdown-code font-mono text-sm"><span class="hljs-comment"># Example: list processes</span>
vol -f mem.dmp windows.pslist

<span class="hljs-comment"># Extract network connections</span>
vol -f mem.dmp windows.netstat

<span class="hljs-comment"># Extract command history / strings</span>
vol -f mem.dmp windows.cmdline | <span class="hljs-built_in">head</span>
</code></pre>
<p class="markdown-p my-4 leading-relaxed"><strong class="markdown-strong font-bold">Search memory for secrets/keys</strong></p>
<pre class="markdown-pre rounded-md bg-muted p-4 overflow-x-auto"><code class="hljs language-bash markdown-code font-mono text-sm">strings -a mem.dmp | egrep -i <span class="hljs-string">"password|ssh-rsa|BEGIN RSA PRIVATE KEY|API_KEY|token|flag"</span>
</code></pre>
<p class="markdown-p my-4 leading-relaxed"><strong class="markdown-strong font-bold">Dump process memory / modules</strong></p>
<pre class="markdown-pre rounded-md bg-muted p-4 overflow-x-auto"><code class="hljs language-bash markdown-code font-mono text-sm">vol -f mem.dmp windows.pstree
vol -f mem.dmp --pid 1234 windows.memmap
vol -f mem.dmp --pid 1234 windows.dumpfiles --dump-dir=proc_dump
</code></pre>
<hr class="markdown-hr my-6 h-px border-0 bg-border">
<h2 class="markdown-h2 text-2xl font-bold mt-6 mb-4">Network forensics (pcap)</h2>
<p class="markdown-p my-4 leading-relaxed"><strong class="markdown-strong font-bold">Capture traffic</strong></p>
<pre class="markdown-pre rounded-md bg-muted p-4 overflow-x-auto"><code class="hljs language-bash markdown-code font-mono text-sm"><span class="hljs-comment"># capture on interface (lab)</span>
tcpdump -i eth0 -w capture.pcap
</code></pre>
<p class="markdown-p my-4 leading-relaxed"><strong class="markdown-strong font-bold">Quick pcap triage</strong></p>
<pre class="markdown-pre rounded-md bg-muted p-4 overflow-x-auto"><code class="hljs language-bash markdown-code font-mono text-sm"><span class="hljs-comment"># extract HTTP objects</span>
tshark -r capture.pcap -Y <span class="hljs-string">"http.request"</span> -T fields -e http.request.uri -e ip.src -e http.host

<span class="hljs-comment"># extract files from pcap (Wireshark GUI or tshark/export)</span>
tcpflow -r capture.pcap -o tcpflow_out
</code></pre>
<p class="markdown-p my-4 leading-relaxed"><strong class="markdown-strong font-bold">Zeek for higher-level logs</strong></p>
<pre class="markdown-pre rounded-md bg-muted p-4 overflow-x-auto"><code class="hljs language-bash markdown-code font-mono text-sm">zeek -r capture.pcap
<span class="hljs-comment"># outputs conn.log, http.log, dns.log, files.log (great for CTF)</span>
</code></pre>
<hr class="markdown-hr my-6 h-px border-0 bg-border">
<h2 class="markdown-h2 text-2xl font-bold mt-6 mb-4">Timeline building (crucial for forensics &amp; CTF writeups)</h2>
<p class="markdown-p my-4 leading-relaxed"><strong class="markdown-strong font-bold">Use Plaso / log2timeline</strong></p>
<pre class="markdown-pre rounded-md bg-muted p-4 overflow-x-auto"><code class="hljs language-bash markdown-code font-mono text-sm">log2timeline.py plaso.dump image.raw
psteal.py --<span class="hljs-built_in">source</span> image.raw --output file.plaso
<span class="hljs-comment"># then</span>
psort.py -o L2tcsv plaso.dump &gt; timeline.csv
</code></pre>
<p class="markdown-p my-4 leading-relaxed"><strong class="markdown-strong font-bold">Manual timeline assembly</strong></p>
<ul class="markdown-ul my-4 ml-6 list-disc">
<li class="markdown-li my-2">Collect timestamps from MFT, $LogFile, macOS unified logs, web logs, and pcap timestamps.</li>
<li class="markdown-li my-2">Normalize to UTC and sort events. Use <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">timesketch</code> for collaborative timeline review.</li>
</ul>
<hr class="markdown-hr my-6 h-px border-0 bg-border">
<h2 class="markdown-h2 text-2xl font-bold mt-6 mb-4">Specialized artifact checks (CTF common finds)</h2>
<p class="markdown-p my-4 leading-relaxed"><strong class="markdown-strong font-bold">Search for flags (typical patterns)</strong></p>
<pre class="markdown-pre rounded-md bg-muted p-4 overflow-x-auto"><code class="hljs language-bash markdown-code font-mono text-sm">grep -R --line-number -iE <span class="hljs-string">"flag\{|FLAG\{|\bctf\b|\bsecret\b"</span> /mnt/image_mount || <span class="hljs-literal">true</span>
strings image.raw | egrep -i <span class="hljs-string">"flag\{.*\}"</span> || <span class="hljs-literal">true</span>
</code></pre>
<p class="markdown-p my-4 leading-relaxed"><strong class="markdown-strong font-bold">Search for private keys or PEM blobs</strong></p>
<pre class="markdown-pre rounded-md bg-muted p-4 overflow-x-auto"><code class="hljs language-bash markdown-code font-mono text-sm">grep -R --line-number -E <span class="hljs-string">"-----BEGIN (RSA|PRIVATE) KEY-----"</span> /mnt/image_mount || <span class="hljs-literal">true</span>
</code></pre>
<p class="markdown-p my-4 leading-relaxed"><strong class="markdown-strong font-bold">Look for credentials in config files</strong></p>
<pre class="markdown-pre rounded-md bg-muted p-4 overflow-x-auto"><code class="hljs language-bash markdown-code font-mono text-sm">egrep -i <span class="hljs-string">"password|passwd|db_pass|connection_string|jdbc|mongo"</span> -R /mnt/image_mount || <span class="hljs-literal">true</span>
</code></pre>
<p class="markdown-p my-4 leading-relaxed"><strong class="markdown-strong font-bold">Extract browser history / cookies</strong></p>
<ul class="markdown-ul my-4 ml-6 list-disc">
<li class="markdown-li my-2">For Chrome: <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">~/.config/google-chrome/Default/History</code> (SQLite)</li>
<li class="markdown-li my-2">Use <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">sqlite3</code> to query URLs, or <code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">plaso</code>/<code class="markdown-code font-mono text-sm bg-muted px-1.5 py-0.5 rounded">autopsy</code> to parse.</li>
</ul>
<hr class="markdown-hr my-6 h-px border-0 bg-border">
<h2 class="markdown-h2 text-2xl font-bold mt-6 mb-4">Carving &amp; reverse-engineering files</h2>
<p class="markdown-p my-4 leading-relaxed"><strong class="markdown-strong font-bold">Binwalk for firmware / embedded</strong></p>
<pre class="markdown-pre rounded-md bg-muted p-4 overflow-x-auto"><code class="hljs language-bash markdown-code font-mono text-sm">binwalk -e firmware.bin
</code></pre>
<p class="markdown-p my-4 leading-relaxed"><strong class="markdown-strong font-bold">Extract images &amp; documents</strong></p>
<pre class="markdown-pre rounded-md bg-muted p-4 overflow-x-auto"><code class="hljs language-bash markdown-code font-mono text-sm">foremost -i image.raw -o foremost_output
</code></pre>
<hr class="markdown-hr my-6 h-px border-0 bg-border">
<h2 class="markdown-h2 text-2xl font-bold mt-6 mb-4">Reporting (CTF-style and forensic integrity)</h2>
<p class="markdown-p my-4 leading-relaxed">Your report should include:</p>
<ul class="markdown-ul my-4 ml-6 list-disc">
<li class="markdown-li my-2"><strong class="markdown-strong font-bold">Scope</strong> (image name, hash, acquisition time, who/where).</li>
<li class="markdown-li my-2"><strong class="markdown-strong font-bold">Methods</strong> (commands used with versions and timestamps).</li>
<li class="markdown-li my-2"><strong class="markdown-strong font-bold">Findings</strong> (timelines, key artifacts, flags or secrets found, file paths, offsets).</li>
<li class="markdown-li my-2"><strong class="markdown-strong font-bold">Evidence</strong> (MD5/SHA hashes of recovered artifacts).</li>
<li class="markdown-li my-2"><strong class="markdown-strong font-bold">Repro steps</strong> (how to extract artifact from image).</li>
<li class="markdown-li my-2"><strong class="markdown-strong font-bold">Conclusion &amp; remediation</strong> (for CTF: explanation of how flag relates to artifacts).</li>
</ul>
<p class="markdown-p my-4 leading-relaxed">Example evidence snippet:</p>
<pre class="markdown-pre rounded-md bg-muted p-4 overflow-x-auto"><code class="hljs language-yaml markdown-code font-mono text-sm"><span class="hljs-attr">Artifact:</span> <span class="hljs-string">/home/user/flag.txt</span>
<span class="hljs-attr">Offset:</span> <span class="hljs-number">0x1F4A000</span>
<span class="hljs-attr">SHA256:</span> <span class="hljs-string">3b3a...abcd</span>
<span class="hljs-attr">Acquired:</span> <span class="hljs-number">2025-10-24T09:12:34Z</span>
<span class="hljs-attr">Command used:</span> <span class="hljs-string">icat</span> <span class="hljs-string">image.raw</span> <span class="hljs-number">12345</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">/tmp/flag.txt</span>
</code></pre>7:["$","div",null,{"className":"pt-12","children":["$","article",null,{"className":"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8","children":[["$","header",null,{"className":"mb-12 border-b pb-8","children":[["$","div",null,{"className":"mb-10"}],["$","h1",null,{"className":"text-4xl md:text-5xl font-bold text-foreground mb-6","children":"Digital Forensics for CTFs & Labs"}],["$","div",null,{"className":"flex items-center gap-6 text-sm text-muted-foreground","children":[["$","div",null,{"className":"flex items-center gap-2","children":["$","span",null,{"children":["By ","Frigg"]}]}],["$","div",null,{"children":["$","span",null,{"children":"10/25/2025"}]}]]}]]}],["$","div",null,{"className":"prose prose-lg max-w-none","dangerouslySetInnerHTML":{"__html":"$10"}}],["$","div",null,{"className":"mt-12 pt-8 border-t","children":["$","$L5",null,{"href":"/posts","className":"text-primary hover:text-primary/80 transition-colors font-semibold inline-flex items-center gap-2","children":[["$","svg",null,{"ref":"$undefined","xmlns":"http://www.w3.org/2000/svg","width":18,"height":18,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-arrow-right rotate-180","children":[["$","path","1ays0h",{"d":"M5 12h14"}],["$","path","xquz4c",{"d":"m12 5 7 7-7 7"}],"$undefined"]}],"Back to Posts"]}]}]]}]}]
a:null
e:[["$","title","0",{"children":"Digital Forensics for CTFs & Labs"}],["$","meta","1",{"name":"description","content":"A blog post by Frigg about cybersecurity"}],["$","link","2",{"rel":"icon","href":"/favicon.ico"}]]
